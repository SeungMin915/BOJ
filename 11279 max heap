#include <stdio.h>
#include <stdlib.h>

typedef struct{
	int key;
} element;

typedef struct{
	element heap[100001];
	int heap_size;
} Heap;

void insert_max_heap(Heap *h, element item)
{
	int i;
	i=++(h->heap_size);
	
	while((i!=1) && (item.key > h->heap[i/2].key))
	{
		h->heap[i]=h->heap[i/2];
		i/=2;
	}
	h->heap[i]=item;
}

element del_max_heap(Heap *h)
{
	int parent, child;
	element item, tmp;
	
	item=h->heap[1];
	tmp=h->heap[(h->heap_size)--];
	parent=1, child=2;
	
	while(child <= h->heap_size)
	{
		if((child < h->heap_size) && (h->heap[child].key < h->heap[child+1].key))
			child++;
		if(tmp.key >= h->heap[child].key) 
			break;
		
		h->heap[parent] = h->heap[child];
		parent=child;
		child*=2;
	}
	h->heap[parent]=tmp;
	return item;
}

int main()
{
	int N;
	element x,num;
	Heap h;
	h.heap_size=0;
	scanf("%d",&N);
	
	while(N--)
	{
		scanf("%d",&x.key);
		
		if(x.key==0 && h.heap_size==0)
		{
			printf("0\n");
		}
		
		else if(x.key==0 && h.heap_size!=0)
		{
			num=del_max_heap(&h);
			printf("%d\n",num.key);
		}
		
		else
		{
			insert_max_heap(&h, x);
		}
	}
	
	return 0;
}
